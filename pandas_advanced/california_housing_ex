
import pandas

train = pandas.read_csv('./sample_data/california_housing_train.csv')

test = pandas.read_csv('./sample_data/california_housing_test.csv')

test.head()

train_copy = train.copy()
train_copy.info()

train_copy.describe()

train_copy.columns

set(train_copy['longitude'])

numeric_variables = ['longitude', 'latitude', 'housing_median_age', 'total_rooms'       , 'total_bedrooms', 'poulations', 'households', 'median_income' ]
          # video length
category_variables = [] #0 or 1
trash_bin = []
y_axis_varialbe = ['median_house_value']

from sklearn import linear_model
import numpy
from sklearn.model_selection import train_test_split #train_test_split from library
from sklearn.metrics import mean_absolute_error

train_copy.corr(method='pearson', min_periods=1).loc['median_house_value',:] 


# x 
x_axis2 = numpy.array(train_copy['median_house_value'])
x_axis2
x_axis2 = numpy.expand_dims(x_axis2, axis = 1)
x_axis2 # 2차원 완성
x_axis2.shape     #(17000, 1)

# y 
y_axis = numpy.array(train_copy['median_income'])
y_axis

x_train, x_test, y_train, y_test = train_test_split(x_axis2, y_axis, test_size = 0.3, shuffle=True, random_state=1)
#same model

model1 = linear_model.LinearRegression()
model1.fit(x_train, y_train)

train_mae1 = mean_absolute_error(y_train, model1.predict(x_train)) # train data
test_mae1 = mean_absolute_error(y_test, model1.predict(x_test)) #testdata

print(train_mae1, test_mae1)
#approximately 1.0229724900774897 0.9787223341213411 

test_copy['sample_col'] = test_copy.apply(lambda x_axis2 : str(x_axis2.longitude) + str(x_axis2.latitude),axis=1)
