# House Price Project

from sklearn.model_selection import train_test_split

x_train, x_val, y_train, y_val = train_test_split(x, y, test_size = 0.2, shuffle=True, stratify=y, random_state=1)


from sklearn import linear_model

reg_1 = linear_model.LinearRegression()

from sklearn.metrics import mean_absolute_error

reg_1.fit(x_train, y_train) 
train_mae = mean_absolute_error(y_train, reg_1.predict(x_train))
val_mae = mean_absolute_error(y_val, reg_1.predict(x_val))


print(train_mae, val_mae) 

numeric_vars = ['Id', 'MSSubClass',
        'SalePrice']


for whatever_each in numeric_vars:
    x = np.array(train_copy[whatever_each])
    x = np.expand_dims(x, 1) 
    y = np.array(train_copy.SalePrice)

    x_train, x_val, y_train, y_val = train_test_split(x, y, test_size = 0.2, shuffle=True, random_state=1) 

    reg_1 = linear_model.LinearRegression()

    reg_1.fit(x_train, y_train) 
    train_mae = mean_absolute_error(y_train, reg_1.predict(x_train))
    val_mae = mean_absolute_error(y_val, reg_1.predict(x_val))
    print(whatever_each) 
    print(train_mae, val_mae)
    

test1 = test.copy()
test1['id1'] = test1.apply(lambda x : str(x.Id) + str(x.MSSubClass), axis=1) 

x_test = np.array(test1['OverallQual'])
x_test = np.expand_dims(x_test,1)


reg_1_best = linear_model.LinearRegression()
x = np.array(train_copy['OverallQual'])
x = np.expand_dims(x,1)
y = np.array(train_copy.SalePrice)
reg_1_best.fit(x,y)


y_test_predict = reg_1_best.predict(x_test)
pd.DataFrame({'Id':test1['id1'], 'SalePrice':y_test_predict})
q1_submission = pd.DataFrame({'Id':test1['id1'], 'SalePrice':y_test_predict}) 
q1_submission.to_csv('submission1.csv')
